// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AccountType {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Account     Account[] @relation("fk_account_account_type")
}

model CategoryType {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  slug        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category[]    @relation("fk_category_type")
  transaction Transaction[] @relation("fk_transaction_type")
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  typeId      String        @db.ObjectId
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        CategoryType  @relation("fk_category_type", fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  subCategory SubCategory[] @relation("fk_sub_category_category")
  transaction Transaction[] @relation("fk_transaction_category")
}

model SubCategory {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  categoryId  String        @db.ObjectId
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  category    Category      @relation("fk_sub_category_category", fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transaction Transaction[] @relation("fk_transaction_sub_category")
}

model Account {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  accountTypeId  String        @db.ObjectId
  name           String
  initialBalance Float
  balance        Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  accountType    AccountType   @relation("fk_account_account_type", fields: [accountTypeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  transaction    Transaction[] @relation("fk_transaction_account")
}

model Transaction {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  categoryTypeId String       @db.ObjectId
  categoryId     String       @db.ObjectId
  subCategoryId  String       @db.ObjectId
  accountId      String       @db.ObjectId
  description    String
  value          Float
  date           DateTime
  isActive       Boolean
  mustIgnore     Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  type           CategoryType @relation("fk_transaction_type", fields: [categoryTypeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  category       Category     @relation("fk_transaction_category", fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  subCategory    SubCategory  @relation("fk_transaction_sub_category", fields: [subCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  account        Account      @relation("fk_transaction_account", fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
